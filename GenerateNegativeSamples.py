
##################################################################
''''''
''''''
'''
This file is to Generate the negative samples, with the sample size and form 
as the training and testing data
1. The negative samples are generated by the random method.
2. The negatiev samples should not have any element in commone with the training or 
    testing samples.
'''
''''''
''''''

#############################################################################
import os
import json
import random
#import copy
########################################################################### 
'''
Generate_random_negative: 
    a function to generate negative samples with the same pattern and size of the input data.
    By negative samples, we mean the randomly generated samples, and they are not in the data.
Input:
    data: 
        a list of core paires, which is the output of the module of FrameConstraint
Output:
    negative_samples:
         a list of randomly generated cores, with the element in the form of 
         [['ALA','GLU'], ['TYR','MET'], -1, -1]
         The length of the negative sampels equals to the length of data
'''          
def Generate_random_negative(data):
    
    TripleSingle =  [['TYR', 'Y'], ['LYS', 'K'],['ASP', 'D'], ['ASN', 'N'], ['TRP', 'W'], ['PHE', 'F'], ['GLN', 'Q'],
                    ['GLU', 'E'], ['PRO', 'P'], ['GLY', 'G'], ['THR', 'T'],['SER', 'S'], ['ARG', 'R'], ['HIS', 'H'],
                    ['LEU', 'L'], ['ILE', 'I'], ['CYS', 'C'], ['ALA', 'A'], ['MET', 'M'], ['VAL', 'V']]
    AA = []
    for aa in TripleSingle:
        AA.append(aa[0])
     
    Ab_Ag = []
    for parepi in data:
        Ab_Ag.append([parepi[0], parepi[1]])
        
    Ab_length = len(Ab_Ag[0][0])
    Ag_length = len(Ab_Ag[0][1])
    sample_size = len(data)
    
    negative_samples = []
    while len(negative_samples) < sample_size:
        r_Ab_r_Ag = []
        while r_Ab_r_Ag == []:        
            r_Ab = With_replacement_sample(AA, Ab_length)
            r_Ag = With_replacement_sample(AA, Ag_length)
            r_Ab_r_Ag  = [r_Ab, r_Ag]
            if r_Ab_r_Ag in Ab_Ag:
                r_Ab_r_Ag  = []
        negative_samples.append([r_Ab, r_Ag, -1, -1])
    return negative_samples

def With_replacement_sample(population, size):
    sample = []
    while len(sample) < size:
        sample.extend(random.sample(population,1))
    return sample
###############################################################

def main():
    # Set the working directory and the saving directory
    wd = '/home/leo/Documents/Database/Pipeline_New/Cores'
    training_testing = ['training', 'testing']
    # we want to generate 10 negative samples
    for n in range(10):
        sd = '/home/leo/Documents/Database/Pipeline_New/Negative_Cores/'+'Sample_'+str(n)        
        for train_test in training_testing:
            for i in range(1, 5):
                for j in range(1, 5):                
                    for k in [1, 0]:                        
                        for h in [1, 2, 3]:                                                                   

                            name = str(i)+'_'+str(j)+'_'+str(k)+'_'+str(k)+'_1_2_'+str(h)+'perchain'
                            print('working on '+ name)
    
                            # Save the core aa
                            os.chdir(wd)
                            with open(train_test+'_'+name, 'r') as f:
                                data = json.load(f)
                            
                            # Generate the negative samples
                            negative_samples = Generate_random_negative(data)
                            
                            # Save the negative samples
                            os.chdir(sd)
                            save_name = train_test + '_' + name + '_negative'
                            with open(save_name, 'w') as f:
                                json.dump(negative_samples, f)
    
                        os.chdir(wd)
                        name = str(i)+'_'+str(j)+'_'+str(k)+'_'+str(k)+'_1_'+'1perCDR'
                        print('working on '+ name)
                        
                        with open(train_test+'_'+name, 'r') as f:
                            data = json.load(f)
                            
                        negative_samples = Generate_random_negative(data)
                        
                        # Save the results
                        os.chdir(sd)
                        save_name = train_test+'_'+name+'_negative'
                        with open(save_name, 'w') as f:
                            json.dump(negative_samples, f)
   
####################################################################
if __name__ == '__main__':
    main()

####################################################################
'''
Need to take a look at the negative samples, make sure they have nothing in common with the real cores
'''
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
